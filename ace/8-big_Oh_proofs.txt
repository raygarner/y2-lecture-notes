multiplication rule
    f1(n) is O(g1(n))
    f2(n) is O(g2(n))
    f1(n) <= c1 * g1(n) forall n >= n1
    f2(n) <= c2 * g2(n) forall n >= n2
    n0 = max(n1, n2)
    f1(n) * f2(n) <= c1 * c2 * g1(n) * g2(n) forall n >= n0
    therefore
    f1(n) * f2(n) is O(g1(n) * g2(n))

drop smaller terms rule
    f(n) = 1 + h(n) with h(n) -> 0 as n -> infinity
    means
    f(n) is O(1)

note:
    we write f(n) = O(g(n)) 
    if there exists n0 and c such that f(n)<= c*g(n)
    while n >= n0

n**2 is a power law, not an exponent
2**n is an exponent

n / log n -> inf
(log n) / n -> 0

big-Oh as a set
    O(n) can be thought of as the set of functions which are O(n)
    (the set of all functions whose growth is no worse than linear for sufficiently large n)
